
#  spectral_server_accept_import_config_dirs_process_cmd.properties


###   For running in Tomcat, environment variables can be set by adding to the file 'setenv.sh' 

##   export <environment variable>=<value>

##   'setenv.sh' on Ubuntu for package installed Tomcat is in '/usr/share/tomcat9/bin'


scan.storage.base.directory=    ##  if 's3.bucket' below is populated then see comments above it.

#  Or use environment variable String:   SPECTRAL_STORAGE_BASE_DIRECTORY=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_BASE_DIRECTORY=###

temp.upload.base.directory=     ##  if 's3.bucket.input.scan.file' below is populated then see comments above it.
								##  if 's3.bucket' is populated, then the output files are written here before being transfered to S3
								
#  Or use environment variable String:   SPECTRAL_STORAGE_TEMP_UPLOAD_BASE_DIRECTORY=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_TEMP_UPLOAD_BASE_DIRECTORY=###

# The Base Directory that the importer writes the data files to 
# before either moving them to under scan.storage.base.directory or copying them to S3
# 
# If this is not configured, then a special directory is created under scan.storage.base.directory and that is used.
importer.temp.output.base.directory=  
									
#  Or use environment variable String:   SPECTRAL_STORAGE_IMPORTER_TEMP_OUTPUT_BASE_DIRECTORY=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_IMPORTER_TEMP_OUTPUT_BASE_DIRECTORY=###
	

#  Files moved here from 'scan.storage.base.directory' here when a new file is created for a newer File Format version
#     Need to be able to do simple move of files from 'scan.storage.base.directory' to this directory
#     Valid to not configure this. 
backup.old.base.directory=

#  Or use environment variable String:   SPECTRAL_STORAGE_IMPORTER_BACKUP_OLD_BASE_DIRECTORY=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_IMPORTER_BACKUP_OLD_BASE_DIRECTORY=###
	
##############

#     If 's3.bucket' is populated, the Main data files will be stored here instead of in 'scan.storage.base.directory' directory

##  Main bucket where the data files are stored

# s3.bucket=

#  Or use environment variable String:   SPECTRAL_STORAGE_BASE_DIRECTORY=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_BASE_DIRECTORY=###

#  optional, required if not set via environment variable
# s3.region=

#  Or use environment variable String:   SPECTRAL_STORAGE_BASE_DIRECTORY=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_BASE_DIRECTORY=###

##############

###### if 's3.bucket.input.scan.file' is populated, the scan file contents that are sent are stored here instead of in
######    'temp.upload.base.directory' BUT 'temp.upload.base.directory' is still always required.

##  Temporary bucket where the incoming scan files to process are stored, if the file location is not passed in.

# s3.bucket.input.scan.file.storage=

#  Or use environment variable String:   SPECTRAL_STORAGE_S3_BUCKET_INPUT_SCAN_FILE_STORAGE=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_S3_BUCKET_INPUT_SCAN_FILE_STORAGE=###

#  optional, required if not set via environment variable
# s3.region.input.scan.file.storage=

#  Or use environment variable String:   SPECTRAL_STORAGE_S3_REGION_INPUT_SCAN_FILE_STORAGE=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_S3_REGION_INPUT_SCAN_FILE_STORAGE=###



#############

######   NOT applicable when receive Scan File S3 file location.

#  For requests that send the scan filename with path
#     restrict the path to start with one of these values.
#  If not configured with a value, 
#     all requests with scan filename and path will be rejected 
#     with the appropriate flag in the response.
#  The 'scan filename with path' string is turned into a Java File object
#     and then 'getCanonicalPath()' is called on it to resolve all 
#     path redirection like '../'.  
#     Also 'getCanonicalPath()' follows all symlinks to the actual file.
#     So the start of the path to the actual file is what has to be specified here. 
#  (Comma separated) 

# submitted.scan.file.path.restrictions=

#############

#  Importer (process scan file) that is run by this webapp info: 
#    (spawned as a process)

process.scan.upload.jar.file=

#  Or use environment variable String:   SPECTRAL_STORAGE_PROCESS_SCAN_UPLOAD_JAR_FILE=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_PROCESS_SCAN_UPLOAD_JAR_FILE=###

#  default "java"
java.executable=

#  Or use environment variable String:   SPECTRAL_STORAGE_JAVA_EXECUTABLE=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_JAVA_EXECUTABLE=###

#  Single Space delimited.  For things like max heap. ie: -Xmx512m -Xms512m 
java.executable.parameters=

#  Or use environment variable String:   SPECTRAL_STORAGE_JAVA_EXECUTABLE_PARAMETERS=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_JAVA_EXECUTABLE_PARAMETERS=###

#  Parameters to Importer process:

# delete.uploaded.scan.file.on.successful.import=true

# delete.uploaded.scan.file.on.successful.import=

#  Or use environment variable String:   SPECTRAL_STORAGE_DELETE_UPLOADED_SCAN_FILE_ON_SUCCESSFUL_IMPORT=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_DELETE_UPLOADED_SCAN_FILE_ON_SUCCESSFUL_IMPORT=###


###  "...import.scan.files.to.keep..."  configures keeping the last scan files processed for review if there are problems.
###                                        The retained time and count is kept low to reduce disk space.
###                                        Set these to zero for NO retention to reduce disk space used.

#  These 'max...' take zero or a positive integer (whole number).  The default is 2.

#  "...for.successful.import" has no effect if delete.uploaded.scan.file.on.successful.import=true

#  max.import.scan.files.to.keep.for.successful.import=

#  Or use environment variable String:   SPECTRAL_STORAGE_MAX_IMPORT_SCAN_FILES_TO_KEEP_FOR_SUCCESSFUL_IMPORT=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_MAX_IMPORT_SCAN_FILES_TO_KEEP_FOR_SUCCESSFUL_IMPORT=###

#  max.days.to.keep.import.scan.files.for.successful.import=

#  Or use environment variable String:   SPECTRAL_STORAGE_MAX_DAYS_TO_KEEP_IMPORT_SCAN_FILES_FOR_SUCCESSFUL_IMPORT=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_MAX_DAYS_TO_KEEP_IMPORT_SCAN_FILES_FOR_SUCCESSFUL_IMPORT=###

#  max.import.scan.files.to.keep.for.failed.import=

#  Or use environment variable String:   SPECTRAL_STORAGE_MAX_IMPORT_SCAN_FILES_TO_KEEP_FOR_FAILED_IMPORT=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_MAX_IMPORT_SCAN_FILES_TO_KEEP_FOR_FAILED_IMPORT=###

#  max.days.to.keep.import.scan.files.for.failed.import=
	
#  Or use environment variable String:   SPECTRAL_STORAGE_MAX_DAYS_TO_KEEP_IMPORT_SCAN_FILES_FOR_FAILED_IMPORT=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_MAX_DAYS_TO_KEEP_IMPORT_SCAN_FILES_FOR_FAILED_IMPORT=###
	

#############

#  Totally optional

#  Send email on Importer (process scan file) program end (process exit) config 

email.smtp.host=

#  Or use environment variable String:   SPECTRAL_STORAGE_EMAIL_SMTP_HOST=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_EMAIL_SMTP_HOST=###

email.smtp.port=

#  Or use environment variable String:   SPECTRAL_STORAGE_EMAIL_SMTP_PORT=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_EMAIL_SMTP_PORT=###

##  username and password ONLY USED if both have a value

email.smtp.server.auth.username=

#  Or use environment variable String:   SPECTRAL_STORAGE_EMAIL_SMTP_SERVER_AUTH_USERNAME=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_EMAIL_SMTP_SERVER_AUTH_USERNAME=###

email.smtp.server.auth.password=

#  Or use environment variable String:   SPECTRAL_STORAGE_EMAIL_SMTP_SERVER_AUTH_PASSWORD=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_EMAIL_SMTP_SERVER_AUTH_PASSWORD=###


email.from.address=

#  Or use environment variable String:   SPECTRAL_STORAGE_EMAIL_FROM_ADDRESS=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_EMAIL_FROM_ADDRESS=###

# comma delimited
email.to.addresses=

#  Or use environment variable String:   SPECTRAL_STORAGE_EMAIL_TO_ADDRESS=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_EMAIL_TO_ADDRESS=###

#  Send to these email addresses when processing result is fail, comma delimited
email.to.addresses.failed.only=

#  Or use environment variable String:   SPECTRAL_STORAGE_EMAIL_TO_ADDRESSES_FAILED_ONLY=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_EMAIL_TO_ADDRESSES_FAILED_ONLY=###

##   Part of sent email
email.machine.name=

#  Or use environment variable String:   SPECTRAL_STORAGE_EMAIL_MACHINE_NAME=###
#  Or use JVM -D parameter String:       SPECTRAL_STORAGE_EMAIL_MACHINE_NAME=###
