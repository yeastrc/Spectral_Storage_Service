<?xml version="1.0" encoding="US-ASCII" ?>
<project name="Spectral Storage Accept Import build web app war" default="package_war" basedir="." >
	
  <target name="init">
    <tstamp/>
  	
	<available file="../${file.separator}.git" type="dir" property="git.present"/>
	
	  	

  	<!-- name of jar or whatever that is copied to deploy -->
    <property name="deployablename" value="spectral_storage_accept_import.war" />

  	<property name="src_shared_server_client_importer" value="../Spectral_Storage_Service_Common_All/src_shared_server_client_importer" />
  	<property name="src_shared_server_client" value="src_shared_server_client" />
  	<property name="src_spectral_file" value="../Spectral_Storage_File_Common/src_spectral_file" />
    <property name="src_web_app" value="src_web_app" />
    <property name="zz_build_dir" value="zz_build_dir" />
    <property name="build" value="build" />
    <property name="classesweb" value="zz_build_dir/WEB-INF/classes" />
    <property name="deploy" value="deploy" />
    <property name="config" value="resources" />
    <property name="libweb" value="zz_build_dir/WEB-INF/lib" />
  </target>


	<tstamp prefix="build-info">
		<format property="current-date" pattern="d-MMMM-yyyy" locale="en" />
		<format property="current-time" pattern="hh:mm:ss a z" locale="en" />
		<format property="year-month-day" pattern="yyyy-MM-dd" locale="en" />
	</tstamp>
	
	
	<property name="aa_Ant_Config__dir_name" value="aa_Ant_Config" />

	
	<property name="path_to__aa_Ant_Config" value="../${aa_Ant_Config__dir_name}" />

	
	<fail message="ERROR: 'aa_Ant_Config' directory not found, check the path. path: ${path_to__aa_Ant_Config}">
	    <condition>
	        <not>
	        	<available file="${path_to__aa_Ant_Config}" />
	        </not>
	    </condition>
	</fail>
	
		
	<!-- ================================================================================== -->
	<!--  repository wide overall Ant properties in overall_build_config.properties -->
	<!-- ================================================================================== -->
	
	
	<property name="overall_build_config.properties__file_with_path" 
		value="${path_to__aa_Ant_Config}${file.separator}overall_build_config.properties"/>
		
	<fail message="ERROR: 'overall_build_config.properties' file not found, check the path. filename with path: ${overall_build_config.properties__file_with_path}">
	<condition>
	    <not>
	    	<available file="${overall_build_config.properties__file_with_path}" />
	    </not>
	</condition>
	</fail>
	
	<!-- This does not fail if the file is not found -->
	<property file="${overall_build_config.properties__file_with_path}" />
	
	
	
	
  <target name="clean" depends="init">
    <delete dir="${classesweb}" />
  	<delete dir="${zz_build_dir}" />
    <delete dir="${deploy}" />
  </target>

  <target name="prepare" depends="clean">
  	<mkdir dir="${zz_build_dir}" />
    <mkdir dir="${classesweb}" />
    <mkdir dir="${deploy}" />
  </target>
	
	
	

	<target name="git.revision" 
			description="Store git revision in ${git.last.tag.and.commit.hash} and ${git.last.commit.hash}" 
			if="git.present">
		
		<exec executable="git" outputproperty="git.last.tag.and.commit.hash.from.cmd" failifexecutionfails="false" errorproperty="">
			<arg value="describe"/>
			<arg value="--tags"/>
			<arg value="--always"/>
			<arg value="HEAD"/>
		</exec>
		
		<echo message="git.last.tag.and.commit.hash.from.cmd: ${git.last.tag.and.commit.hash.from.cmd}"/>
		
		<condition property="git.last.tag.and.commit.hash" value="${git.last.tag.and.commit.hash.from.cmd}" else="unknown">
			<and>
				<isset property="git.last.tag.and.commit.hash.from.cmd"/>
				<length string="${git.last.tag.and.commit.hash.from.cmd}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		
		<echo message="git.last.tag.and.commit.hash: ${git.last.tag.and.commit.hash}"/>


		<exec executable="git" outputproperty="git.last.commit.hash.from.cmd" failifexecutionfails="false" errorproperty="">
			<arg value="describe"/>
			<arg value="--always"/>
			<arg value="HEAD"/>
		</exec>
				

		<echo message="git.last.commit.hash.from.cmd: ${git.last.commit.hash.from.cmd}"/>
		
		<condition property="git.last.commit.hash" value="${git.last.commit.hash.from.cmd}" else="unknown">
			<and>
				<isset property="git.last.commit.hash.from.cmd"/>
				<length string="${git.last.commit.hash.from.cmd}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		
		<echo message="git.last.commit.hash: ${git.last.commit.hash}"/>
	
	</target>	
	

  <target name="compile" depends="prepare">

  	<!--   Prep Build area  -->


  	<!--  Copy in everything under WebRoot except under 'classes' -->

	<copy  todir="zz_build_dir">
	    <fileset dir="WebRoot">
			<exclude name="WEB-INF/classes/**" />
			<exclude name="META-INF/**" />
	    </fileset>
	</copy>

  	<!--  Copy in the needed jar files generated from the source in the other projects -->

  	<!--
	<copy file="../generated_jars/paws_base.jar" todir="${libweb}" />
	-->


	<!--  Build the Java code   -->
  	
  	<echo message="Compiling Java:  java_source: ${java_source}, java_target: ${java_target} "/>  	

  	<javac includeantruntime="false"  srcdir="${src_shared_server_client_importer}" destdir="${classesweb}" debug="true"  
  		 source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
		<classpath refid="classpath"/>
	</javac>
  	
  	<javac includeantruntime="false"  srcdir="${src_shared_server_client}" destdir="${classesweb}" debug="true"  
  		 source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
		<classpath refid="classpath"/>
	</javac>

  	<javac includeantruntime="false"  srcdir="${src_spectral_file}" destdir="${classesweb}" debug="true"  
  		 source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
		<classpath refid="classpath"/>
	</javac>
  	
  	<javac includeantruntime="false"  srcdir="${src_web_app}" destdir="${classesweb}" debug="true"  
  		 source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
		<classpath refid="classpath"/>
	</javac>

  	<!--  Copy in the files in the 'resources' directory  -->
  	<!-- 
	<copy  todir="${classesweb}">
	    <fileset dir="${config}">
	    </fileset>
	</copy>
	-->

  	<!--  Copy in the files in the 'src_web_app' directory that are not Java files -->

  	<copy  todir="${classesweb}">

	    <fileset dir="${src_web_app}">
			<exclude name="**/*.java" />
	    </fileset>
	</copy>





  </target>


	<target name="package_war" depends="compile,git.revision"
		
		description="Packages the project as a deployable war file">

		<war jarfile="${deploy}/${deployablename}" webxml="zz_build_dir/WEB-INF/web.xml">
			<manifest>

	        	<attribute name="GIT-last-tag-commit-hash" value="${git.last.tag.and.commit.hash}"/>
            	<attribute name="GIT-commit-hash" value="${git.last.commit.hash}"/>
    							
				<attribute name="Date" value="${build-info.current-date}" />
				<attribute name="Time" value="${build-info.current-time}" />
			</manifest>			
	
	    	<fileset dir="zz_build_dir">

	     	</fileset>
	
		</war>
		
		<!--
	  	<copy file="${deploy}/${deployablename}" todir="../deploy" />
	  	-->
		
		
	</target>
	
	<path id="classpath">

		<fileset dir="zz_build_dir/WEB-INF/lib">
			<include name="**/*.jar"/>
		</fileset>

		<fileset dir="AppServerJars">
			<include name="**/*.jar"/>
		</fileset>

	</path>





</project>
