<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="create_run_jar" name="spectralStorage_ProcessScanFile.jar  Create Runnable Jar for Jar-in-Jar Loader">

	<property name="jar.main.class" value="org.yeastrc.spectral_storage.scan_file_processor.program.Scan_File_Processor_MainProgram" />

	<property name="output_runnable_jar" value="spectralStorage_ProcessScanFile.jar"/>


	<property name="output_jar_this_project_main_importer" value="spectralStorage_ProcessScanFile_main_jar.jar"/>

	<property name="jar_this_project_main_importer_dir" value="jar_this_project_main_importer" />

    <property name="deploy" value="deploy" />
	
<!--	
    <property name="config" value="resources" />
-->
	
	<property name="src_common" value="src_common" />
	<property name="src_main" value="src_main" />
	<property name="classes" value="classes" />	

	<available file="..${file.separator}.git" type="dir" property="git.present"/>
	

	
	<property name="aa_Ant_Config__dir_name" value="aa_Ant_Config" />

	
	<property name="path_to__aa_Ant_Config" value="../${aa_Ant_Config__dir_name}" />

	
	<fail message="ERROR: 'aa_Ant_Config' directory not found, check the path. path: ${path_to__aa_Ant_Config}">
	    <condition>
	        <not>
	        	<available file="${path_to__aa_Ant_Config}" />
	        </not>
	    </condition>
	</fail>
	
		
	<!-- ================================================================================== -->
	<!--  repository wide overall Ant properties in overall_build_config.properties -->
	<!-- ================================================================================== -->
	
	
	<property name="overall_build_config.properties__file_with_path" 
		value="${path_to__aa_Ant_Config}${file.separator}overall_build_config.properties"/>
		
	<fail message="ERROR: 'overall_build_config.properties' file not found, check the path. filename with path: ${overall_build_config.properties__file_with_path}">
	<condition>
	    <not>
	    	<available file="${overall_build_config.properties__file_with_path}" />
	    </not>
	</condition>
	</fail>
	
	<!-- This does not fail if the file is not found -->
	<property file="${overall_build_config.properties__file_with_path}" />
	
	<!--   -->
	<target name="compile_dependent_jars">
		<ant dir="..${file.separator}Spectral_Storage_Service_Common_All" antfile="ant_build_common_all_jar.xml" />
		<ant dir="..${file.separator}Spectral_Storage_Common_Webapp_Importer" antfile="ant_build_webapp_importer_common_jar.xml" />
	</target>	

    <target name="create_run_jar"  depends="compile_dependent_jars,create_jar_this_project_main_importer">
    	
    	<!-- Add the jars in the 'lib__s3' folder to the class path   -->

		<path id="lib__s3_jars_dir">
		  <fileset dir="lib__s3">
		    <include name="**/*.jar" />
		  </fileset>
		</path>

		<!-- convert classpath to a flat list/string for use in manifest task -->
		<pathconvert property="lib__s3_jars_dir.classpath" pathsep=" ">
		    <path refid="lib__s3_jars_dir" />
		    <flattenmapper />
		</pathconvert>

    	<!-- Add the jars in the 'lib__s3_3rd_party_other_than_shared' folder to the class path   -->

		<path id="lib__s3_3rd_party_other_than_shared_jars_dir">
		  <fileset dir="lib__s3_3rd_party_other_than_shared">
		    <include name="**/*.jar" />
		  </fileset>
		</path>

		<!-- convert classpath to a flat list/string for use in manifest task -->
		<pathconvert property="lib__s3_3rd_party_other_than_shared_jars_dir.classpath" pathsep=" ">
		    <path refid="lib__s3_3rd_party_other_than_shared_jars_dir" />
		    <flattenmapper />
		</pathconvert>

		<!-- Add the jars in the 'lib__shared__spectral_storage__s3_3rd_party' folder to the class path   -->
	
		<path id="lib__shared__spectral_storage__s3_3rd_party_jars_dir">
		  <fileset dir="lib__shared__spectral_storage__s3_3rd_party">
		    <include name="**/*.jar" />
		  </fileset>
		</path>
	
		<!-- convert classpath to a flat list/string for use in manifest task -->
		<pathconvert property="lib__shared__spectral_storage__s3_3rd_party_jars_dir.classpath" pathsep=" ">
		    <path refid="lib__shared__spectral_storage__s3_3rd_party_jars_dir" />
		    <flattenmapper />
		</pathconvert>

    	<!-- Add the jars in the 'lib__spectral_storage_only' folder to the class path   -->

		<path id="lib__spectral_storage_only_jars_dir">
		  <fileset dir="lib__spectral_storage_only">
		    <include name="**/*.jar" />
		  </fileset>
		</path>

		<!-- convert classpath to a flat list/string for use in manifest task -->
		<pathconvert property="lib__spectral_storage_only_jars_dir.classpath" pathsep=" ">
		    <path refid="lib__spectral_storage_only_jars_dir" />
		    <flattenmapper />
		</pathconvert>

    	<!-- Add the jars in the 'Spectral_Storage_Service_Common_All' folder to the class path   -->

		<path id="Spectral_Storage_Service_Common_All_jars_dir">
		  <fileset dir="..${file.separator}Spectral_Storage_Service_Common_All${file.separator}deploy">
		    <include name="**/*.jar" />
		  </fileset>
		</path>

		<!-- convert classpath to a flat list/string for use in manifest task -->
		<pathconvert property="Spectral_Storage_Service_Common_All_jars_dir.classpath" pathsep=" ">
		    <path refid="Spectral_Storage_Service_Common_All_jars_dir" />
		    <flattenmapper />
		</pathconvert>

    	<!-- Add the jars in the 'Spectral_Storage_Common_Webapp_Importer' folder to the class path   -->

		<path id="Spectral_Storage_Common_Webapp_Importer_jars_dir">
		  <fileset dir="..${file.separator}Spectral_Storage_Common_Webapp_Importer${file.separator}deploy">
		    <include name="**/*.jar" />
		  </fileset>
		</path>

		<!-- convert classpath to a flat list/string for use in manifest task -->
		<pathconvert property="Spectral_Storage_Common_Webapp_Importer_jars_dir.classpath" pathsep=" ">
		    <path refid="Spectral_Storage_Common_Webapp_Importer_jars_dir" />
		    <flattenmapper />
		</pathconvert>

    	<property name="final.classpath" value="./ ${output_jar_this_project_main_importer} ${lib__s3_jars_dir.classpath} ${lib__s3_3rd_party_other_than_shared_jars_dir.classpath} ${lib__shared__spectral_storage__s3_3rd_party_jars_dir.classpath} ${lib__spectral_storage_only_jars_dir.classpath} ${Spectral_Storage_Service_Common_All_jars_dir.classpath} ${Spectral_Storage_Common_Webapp_Importer_jars_dir.classpath}"/>
    	
    	
		<echo >Classpath for runnable jar ${final.classpath}</echo>
    	
    	
        <jar destfile="deploy/${output_runnable_jar}">

    	
            <manifest>
                <attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader"/>
                <attribute name="Rsrc-Main-Class" 
                		value="${jar.main.class}"/>
                <attribute name="Class-Path" value="."/>
                <attribute name="Rsrc-Class-Path" value="${final.classpath}"/>

            	<attribute name="GIT-last-tag-commit-hash" value="${git.last.tag.and.commit.hash}"/>
            	<attribute name="GIT-commit-hash" value="${git.last.commit.hash}"/>
    			
				<attribute name="Date" value="${build-info.current-date}" />
				<attribute name="Time" value="${build-info.current-time}" />

            </manifest>
        	
            <zipfileset src="jar-in-jar-loader.zip"/>
            <zipfileset dir="${jar_this_project_main_importer_dir}" />
        	<zipfileset dir="lib__s3" />
        	<zipfileset dir="lib__s3_3rd_party_other_than_shared" />
        	<zipfileset dir="lib__shared__spectral_storage__s3_3rd_party" />
        	<zipfileset dir="lib__spectral_storage_only" />
        	<zipfileset dir="..${file.separator}Spectral_Storage_Service_Common_All${file.separator}deploy" />
        	<zipfileset dir="..${file.separator}Spectral_Storage_Common_Webapp_Importer${file.separator}deploy" />
        	
        </jar>
    </target>
	


    <target name="create_jar_this_project_main_importer"  depends="compile,prepare,git.revision">
    	
        <jar destfile="${jar_this_project_main_importer_dir}/${output_jar_this_project_main_importer}">

	        <manifest>
	            <attribute name="Main-Class" value="${jar.main.class}"/>

	        	<attribute name="GIT-last-tag-commit-hash" value="${git.last.tag.and.commit.hash}"/>
            	<attribute name="GIT-commit-hash" value="${git.last.commit.hash}"/>
    			
				<attribute name="Date" value="${build-info.current-date}" />
				<attribute name="Time" value="${build-info.current-time}" />
	        </manifest>
	
	        <fileset dir="${classes}"/>
<!--        	
	        <fileset dir="${config}"/>
-->	        
       </jar>

    </target>
	
	

    <target name="prepare">
    	<tstamp prefix="build-info">
			<format property="current-date" pattern="d-MMMM-yyyy" locale="en" />
			<format property="current-time" pattern="hh:mm:ss a z" locale="en" />
			<format property="year-month-day" pattern="yyyy-MM-dd" locale="en" />
		</tstamp>

    </target>
	
	
	<target name="git.revision" 
			description="Store git revision in ${git.last.tag.and.commit.hash} and ${git.last.commit.hash}" 
			if="git.present">
		
		<exec executable="git" outputproperty="git.last.tag.and.commit.hash.from.cmd" failifexecutionfails="false" errorproperty="">
			<arg value="describe"/>
			<arg value="--tags"/>
			<arg value="--always"/>
			<arg value="HEAD"/>
		</exec>
		
		<echo message="git.last.tag.and.commit.hash.from.cmd: ${git.last.tag.and.commit.hash.from.cmd}"/>
		
		<condition property="git.last.tag.and.commit.hash" value="${git.last.tag.and.commit.hash.from.cmd}" else="unknown">
			<and>
				<isset property="git.last.tag.and.commit.hash.from.cmd"/>
				<length string="${git.last.tag.and.commit.hash.from.cmd}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		
		<echo message="git.last.tag.and.commit.hash: ${git.last.tag.and.commit.hash}"/>


		<exec executable="git" outputproperty="git.last.commit.hash.from.cmd" failifexecutionfails="false" errorproperty="">
			<arg value="describe"/>
			<arg value="--always"/>
			<arg value="HEAD"/>
		</exec>
				

		<echo message="git.last.commit.hash.from.cmd: ${git.last.commit.hash.from.cmd}"/>
		
		<condition property="git.last.commit.hash" value="${git.last.commit.hash.from.cmd}" else="unknown">
			<and>
				<isset property="git.last.commit.hash.from.cmd"/>
				<length string="${git.last.commit.hash.from.cmd}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		
		<echo message="git.last.commit.hash: ${git.last.commit.hash}"/>
	
	</target>
				
		
	
	
	<!-- ================================================================================== -->
	<!-- Clean the build directory -->
	<!-- ================================================================================== -->
    <target name="clean" description="Prepare for clean build">
      <delete dir="${classes}"/>
      <mkdir  dir="${classes}"/>
      <delete dir="${deploy}" />
      <mkdir  dir="${deploy}"/>
    	<delete dir="${jar_this_project_main_importer_dir}"/>
    	<mkdir  dir="${jar_this_project_main_importer_dir}"/>
    </target>
	
	<!-- ================================================================================== -->
	<!-- Normal build of application -->
	<!-- ================================================================================== -->
    <target name="compile" depends="clean">
    	
      	<echo message="Compiling Java:  java_source: ${java_source}, java_target: ${java_target} "/>  	
    	
    	<!-- <echo message="${toString:compile.classpath}"/> -->
        <javac includeantruntime="false"  debug="on" srcdir="src_mzML_Reader" destdir="${classes}" source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
            <classpath refid="compile.classpath"/>
        </javac>
    	
    	<!-- <echo message="${toString:compile.classpath}"/> -->
        <javac includeantruntime="false"  debug="on" srcdir="src_main" destdir="${classes}" source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
            <classpath refid="compile.classpath"/>
        </javac>

	<!--
  	<copy  todir="${classes}">

	</copy>
  	-->

  	  	<copy  todir="${classes}">
  	  		
  		    <fileset dir="${src_main}">
  				<exclude name="**/*.java" />
  		    </fileset>
  		</copy>
  		
    </target>
	
	<!-- classpath  -->
    <path id="compile.classpath">

    	<fileset dir="lib__spectral_storage_only">
        	<include name="**/*.jar"/>
      	</fileset>

    	<fileset dir="lib__s3">
        	<include name="**/*.jar"/>
      	</fileset>
    	<fileset dir="lib__s3_3rd_party_other_than_shared">
        	<include name="**/*.jar"/>
      	</fileset>
    	<fileset dir="lib__shared__spectral_storage__s3_3rd_party">
        	<include name="**/*.jar"/>
      	</fileset>

    	<fileset dir="..${file.separator}Spectral_Storage_Service_Common_All${file.separator}deploy">
        	<include name="**/*.jar"/>
      	</fileset>
    	<fileset dir="..${file.separator}Spectral_Storage_Common_Webapp_Importer${file.separator}deploy">
        	<include name="**/*.jar"/>
      	</fileset>

    </path>
			
</project>