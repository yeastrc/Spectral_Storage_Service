<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." name="Spectral Storage Get Data Client Connector Code run build jar" default="build_jar">

	<available file="../${file.separator}.git" type="dir" property="git.present"/>
	  	
		
	<property name="output_jar" value="spectal_storage_get_data_client_connector_code.jar"/>

	<property name="output_source_jar" value="spectal_storage_get_data_client_connector_code_source.jar"/>

	<property name="output_jar_dir" value="deploy_client_connector" />
	
	<property name="src_shared_server_client_importer" value="../Spectral_Storage_Service_Common_All/src_shared_server_client_importer" />
	<property name="src_shared_server_client" value="src_shared_server_client" />
	<property name="src_client_connector" value="src_client_connector" />
	<property name="src_client_connector_JSON" value="src_client_connector_JSON" />
	
	<property name="lib_client_connector_JSON_Jackson_Only" value="lib_client_connector_JSON_Jackson_Only" />
	
	
	<property name="classes" value="zz_classes_shared_server_client" />	
	
	<property name="aa_Ant_Config__dir_name" value="aa_Ant_Config" />

	
	<property name="path_to__aa_Ant_Config" value="../${aa_Ant_Config__dir_name}" />

	
	<fail message="ERROR: 'aa_Ant_Config' directory not found, check the path. path: ${path_to__aa_Ant_Config}">
	    <condition>
	        <not>
	        	<available file="${path_to__aa_Ant_Config}" />
	        </not>
	    </condition>
	</fail>
	
		
	<!-- ================================================================================== -->
	<!--  repository wide overall Ant properties in overall_build_config.properties -->
	<!-- ================================================================================== -->
	
	
	<property name="overall_build_config.properties__file_with_path" 
		value="${path_to__aa_Ant_Config}${file.separator}overall_build_config.properties"/>
		
	<fail message="ERROR: 'overall_build_config.properties' file not found, check the path. filename with path: ${overall_build_config.properties__file_with_path}">
	<condition>
	    <not>
	    	<available file="${overall_build_config.properties__file_with_path}" />
	    </not>
	</condition>
	</fail>
	
	<!-- This does not fail if the file is not found -->
	<property file="${overall_build_config.properties__file_with_path}" />
	
	
			
	
	<!-- ================================================================================== -->
	<!-- user defined values can be defined in build.properties -->
	<!-- ================================================================================== -->
	<property file="${basedir}${file.separator}build.properties" />
	
	<!-- ================================================================================== -->
  	<!-- PRINT HELP -->
	<!-- ================================================================================== -->
	<target name="help"   description="print this help">
		<exec executable="ant">
	   		<arg value="-p"/>
	  	</exec>
	</target>

	

	<!-- Check timestamp on files -->
    <target name="prepare">
    	<tstamp prefix="build-info">
			<format property="current-date" pattern="d-MMMM-yyyy" locale="en" />
			<format property="current-time" pattern="hh:mm:ss a z" locale="en" />
			<format property="year-month-day" pattern="yyyy-MM-dd" locale="en" />
		</tstamp>
    </target>
	
	<!-- ================================================================================== -->
	<!-- Build the jar -->
	<!-- ================================================================================== -->
	<target name="build_jar" depends="compile,git.revision,prepare"
			description="Packages the project as a jar file">
		
		
		<!-- exclude everything in the default package-->
		<jar destfile="${output_jar_dir}${file.separator}${output_jar}" 
			basedir="${basedir}${file.separator}${classes}">

			<manifest>
            	<attribute name="GIT-last-tag-commit-hash" value="${git.last.tag.and.commit.hash}"/>
            	<attribute name="GIT-commit-hash" value="${git.last.commit.hash}"/>
			
				<attribute name="Date" value="${build-info.current-date}" />
				<attribute name="Time" value="${build-info.current-time}" />
			</manifest>

			<!--  			excludes="*.*"  --> 
			
		</jar>
		

		<!-- Build Jar of Src files -->
		<jar destfile="${output_jar_dir}${file.separator}${output_source_jar}" 
			basedir="${basedir}${file.separator}${classes}">

			<fileset dir="${src_shared_server_client_importer}">
  		    </fileset>
  		    <fileset dir="${src_shared_server_client}">
  		    </fileset>
  		    <fileset dir="${src_client_connector}">
  		    </fileset>
			<fileset dir="${src_client_connector_JSON}">
  		    </fileset>
			
			<manifest>
            	<attribute name="GIT-last-tag-commit-hash" value="${git.last.tag.and.commit.hash}"/>
            	<attribute name="GIT-commit-hash" value="${git.last.commit.hash}"/>
			
				<attribute name="Date" value="${build-info.current-date}" />
				<attribute name="Time" value="${build-info.current-time}" />
			</manifest>

			<!--  			excludes="*.*"  --> 
			
		</jar>
		
		

	</target>
	

	<target name="git.revision" 
			description="Store git revision in ${git.last.tag.and.commit.hash} and ${git.last.commit.hash}" 
			if="git.present">
		
		<exec executable="git" outputproperty="git.last.tag.and.commit.hash.from.cmd" failifexecutionfails="false" errorproperty="">
			<arg value="describe"/>
			<arg value="--tags"/>
			<arg value="--always"/>
			<arg value="HEAD"/>
		</exec>
		
		<echo message="git.last.tag.and.commit.hash.from.cmd: ${git.last.tag.and.commit.hash.from.cmd}"/>
		
		<condition property="git.last.tag.and.commit.hash" value="${git.last.tag.and.commit.hash.from.cmd}" else="unknown">
			<and>
				<isset property="git.last.tag.and.commit.hash.from.cmd"/>
				<length string="${git.last.tag.and.commit.hash.from.cmd}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		
		<echo message="git.last.tag.and.commit.hash: ${git.last.tag.and.commit.hash}"/>


		<exec executable="git" outputproperty="git.last.commit.hash.from.cmd" failifexecutionfails="false" errorproperty="">
			<arg value="describe"/>
			<arg value="--always"/>
			<arg value="HEAD"/>
		</exec>
				

		<echo message="git.last.commit.hash.from.cmd: ${git.last.commit.hash.from.cmd}"/>
		
		<condition property="git.last.commit.hash" value="${git.last.commit.hash.from.cmd}" else="unknown">
			<and>
				<isset property="git.last.commit.hash.from.cmd"/>
				<length string="${git.last.commit.hash.from.cmd}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		
		<echo message="git.last.commit.hash: ${git.last.commit.hash}"/>
	
	</target>
				
		
	
	<!-- ================================================================================== -->
	<!-- Clean the build directory -->
	<!-- ================================================================================== -->
    <target name="clean" description="Prepare for clean build">
      <delete dir="${classes}"/>
      <delete dir="${output_jar_dir}"/>
    	
      <mkdir  dir="${classes}"/>

      <mkdir  dir="${output_jar_dir}"/>  <!-- makes it if it doesn't exist.  no error if it does exist -->

    </target>
	
	<!-- ================================================================================== -->
	<!-- Normal build of application -->
	<!-- ================================================================================== -->
    <target name="compile" depends="clean">

      	<echo message="Compiling Java:  java_source: ${java_source}, java_target: ${java_target} "/>  	
    	
    	
    	<!-- <echo message="${toString:compile.classpath}"/> -->
        <javac includeantruntime="false"  debug="on" srcdir="${src_shared_server_client_importer}" destdir="${classes}" source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
            <classpath refid="json.compile.classpath"/>
        </javac>
    	
    	<!-- <echo message="${toString:compile.classpath}"/> -->
        <javac includeantruntime="false"  debug="on" srcdir="${src_shared_server_client}" destdir="${classes}" source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
            <classpath refid="compile.classpath"/>
        </javac>
    	
        <javac includeantruntime="false"  debug="on" srcdir="${src_client_connector}" destdir="${classes}" source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
            <classpath refid="compile.classpath"/>
        </javac>
    	
        <javac includeantruntime="false"  debug="on" srcdir="${src_client_connector_JSON}" destdir="${classes}" source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
            <classpath refid="json.compile.classpath"/>
        </javac>
    	

	<!--
  	<copy  todir="${classes}">

	</copy>
  	-->

  	  	<copy  todir="${classes}">
  	  		
  		    <fileset dir="${src_shared_server_client_importer}">
  				<exclude name="**/*.java" />
  		    </fileset>
  		</copy>
    	
  	  	<copy  todir="${classes}">
  	  		
  		    <fileset dir="${src_shared_server_client}">
  				<exclude name="**/*.java" />
  		    </fileset>
  		</copy>

  	  	<copy  todir="${classes}">
  	  		
  		    <fileset dir="${src_client_connector}">
  				<exclude name="**/*.java" />
  		    </fileset>
  		</copy>
    	
  	  	<copy  todir="${classes}">
  	  		
  		    <fileset dir="${src_client_connector_JSON}">
  				<exclude name="**/*.java" />
  		    </fileset>
  		</copy>
    	
    	
    </target>
	
	<!-- classpath  -->
    <path id="compile.classpath">
<!--
    	<fileset dir="${lib}">
        	<include name="**/*.jar"/>
      	</fileset>
-->
    </path>
	

	<!-- classpath  -->
    <path id="json.compile.classpath">

    	<fileset dir="${lib_client_connector_JSON_Jackson_Only}">
        	<include name="**/*.jar"/>
      	</fileset>

    </path>
		

</project>